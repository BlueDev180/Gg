import { W,H,ROWS,COLS,cellH,BASE_Y,BASE_HIT_Y,TEAMS,STATE, clamp, makeNumFx, makeTextFx, makeRingFx, makeHitFx } from './engine.js';
export const game = { state: STATE.PLAY, wave:1, necroHP:60, souls:0, units:[], proj:[], fx:[], spawnGate:0.8, volleyT:0, shakeT:0, critC:0.12, critM:2.0, bossEvery:5, stars:{SK:1,AR:1,WR:1}, synergies:{Legion:0,Arrowstorm:0,Wisp:0,Doom:0}, relics:[], tempo:false };
export function starScales(code){ const s=game.stars[code]||1; return {hp:1+0.5*(s-1), atk:1+0.35*(s-1), cd:1-0.08*(s-1), scale:1+0.15*(s-1)}; }
function unit(team, code, baseHp, baseAtk, rng, cd, spd){ if(team==='ally'&&(code==='SK'||code==='AR'||code==='WR')){ const s=starScales(code); baseHp=Math.round(baseHp*s.hp); baseAtk=Math.round(baseAtk*s.atk); cd=Math.max(0.35,cd*s.cd);} return {team,code,x:0,y:0,hp:baseHp,max:baseHp,atk:baseAtk,rng,cd,tAtk:0,spd,hitT:0,swingT:0,slowT:0,slowPct:0}; }
export function spawn(kind){ let u=null; switch(kind){ case'Skeleton':u=unit('ally','SK',22,6,1,0.70,160);break; case'BoneKnight':u=unit('ally','BK',70,12,1,0.80,150);break; case'Archer':u=unit('ally','AR',16,7,4,1.00,165);break; case'Wraith':u=unit('ally','WR',14,9,1,0.60,190);break; case'WraithElite':u=unit('ally','WE',26,14,1,0.50,210);break; case'Goblin':u=unit('enemy','EG',12+Math.floor(game.wave*1.2),4+Math.floor(game.wave*0.25),1,0.95,155);break; case'Slinger':u=unit('enemy','ES',10+Math.floor(game.wave*1.1),5+Math.floor(game.wave*0.28),4,1.05,165);break; case'Brute':u=unit('enemy','EB',28+Math.floor(game.wave*1.8),7+Math.floor(game.wave*0.35),1,1.00,135);break; case'Boss':u=unit('enemy','BO',110+Math.floor(game.wave*4.5),9+Math.floor(game.wave*0.6),2,0.90,120);break; } if(!u) return; if(u.team==='ally'){ u.x=W*0.2+Math.random()*W*0.6; u.y=H*0.78+(Math.random()*cellH-cellH/2);} else { u.x=W*0.15+Math.random()*W*0.7; u.y=H*0.06+(Math.random()*cellH*1.5-cellH*0.75);} game.units.push(u); }
export function spawnSquad(kind,n){ for(let i=0;i<n;i++) spawn(kind); }
export function spawnWave(n){ if(n%game.bossEvery===0){ spawn('Boss'); for(let i=0;i<1+Math.floor(n/5);i++) spawn('Brute'); } else { const g=3+Math.floor(n*0.9), s=Math.floor((n-1)/3), b=Math.floor((n-1)/4); for(let i=0;i<g;i++) spawn('Goblin'); for(let i=0;i<s;i++) spawn('Slinger'); for(let i=0;i<b;i++) spawn('Brute'); } }
export function addSynergy(tag,amt=1){ if(tag==='SK'||tag==='BK') game.synergies.Legion+=amt; if(tag==='AR'||tag==='VOLLEY') game.synergies.Arrowstorm+=amt; if(tag==='WR'||tag==='WE') game.synergies.Wisp+=amt; if(tag==='DB') game.synergies.Doom+=amt; }
export function upgradeFamily(code){ const prev=game.stars[code]||1; if(prev>=3){ makeTextFx(game.fx, W*0.5,H*0.12, code+' MAX ★'); return; } game.stars[code]=prev+1; for(const u of game.units){ if(u.team!=='ally'||u.code!==code) continue; const pct=u.hp/u.max; u.max=Math.round(u.max*1.5); u.hp=Math.min(u.max, Math.round(u.max*pct)+Math.round(u.max*0.15)); u.atk=Math.round(u.atk*1.35); u.cd=Math.max(0.35,u.cd*0.92); u.hitT=0.4; } game.shakeT=Math.max(game.shakeT,0.15); makeTextFx(game.fx, W*0.5,H*0.1, code+' ★'+game.stars[code]+'!'); }
export function cast(k,n){ if(k==='SK'){ if(n===1){spawnSquad('Skeleton',1); addSynergy('SK');} if(n===2){spawnSquad('Skeleton',2); addSynergy('SK',2);} if(n===3){upgradeFamily('SK'); spawn('BoneKnight'); addSynergy('BK');} } else if(k==='AR'){ if(n===1){spawnSquad('Archer',1); addSynergy('AR');} if(n===2){spawnSquad('Archer',2); addSynergy('AR',2);} if(n===3){upgradeFamily('AR'); spawnSquad('Archer',2); game.volleyT=4; makeTextFx(game.fx, W*0.5,H*0.82,'VOLLEY!'); addSynergy('VOLLEY');} } else if(k==='WR'){ if(n===1){spawnSquad('Wraith',1); addSynergy('WR');} if(n===2){spawnSquad('Wraith',2); addSynergy('WR',2);} if(n===3){upgradeFamily('WR'); spawn('WraithElite'); addSynergy('WE');} } else if(k==='DB'){ const r=n===1?56:n===2?84:110; const stun=n===3?1.2:0; const slow=n===3?0.45:0; aoe(W*0.5,H*0.33,r,10+n*6,stun,slow); addSynergy('DB'); } }
export function nearest(u,team){ let best=null,bd=1e9; for(const v of game.units){ if(v.team!==team||v.hp<=0) continue; const d=Math.abs(v.x-u.x)+Math.abs(v.y-u.y); if(d<bd){bd=d;best=v;} } return best; }
export function nearestPointTarget(p){ const want=p.team==='ally'?'enemy':'ally'; let best=null,bd=1e9; for(const u of game.units){ if(u.team!==want||u.hp<=0) continue; const d=Math.abs(u.x-p.x)+Math.abs(u.y-p.y); if(d<bd){bd=d;best=u;} } return best; }
export function applyDamage(attacker,target,base,type='phys'){ let dmg=base; if(type!=='spell'){ if(Math.random()<game.critC){ dmg*=game.critM; makeNumFx(game.fx,target.x,target.y,'✦'+Math.round(dmg),'#ffd45a'); game.shakeT=Math.max(game.shakeT,0.06);} else makeNumFx(game.fx,target.x,target.y,'-'+Math.round(dmg),'#ffffff'); } else { makeNumFx(game.fx,target.x,target.y,'-'+Math.round(dmg),'#7ecbff'); } target.hp-=dmg; target.hitT=0.2; }
export function shoot(u,target,dmg){ const ang=Math.atan2(target.y-u.y,target.x-u.x); let mult=1; if(game.volleyT>0&&u.code==='AR') mult*=1.8; game.proj.push({x:u.x,y:u.y,vx:340*Math.cos(ang),vy:340*Math.sin(ang),dmg:dmg*mult,team:u.team,life:1.6}); u.swingT=0.18; }
export function aoe(xc,yc,r,dmg,stun=0,slow=0){ makeRingFx(game.fx,xc,yc,r); for(const u of game.units){ if(u.team!=='enemy'||u.hp<=0) continue; const dx=u.x-xc,dy=u.y-yc; if(Math.hypot(dx,dy)<=r){ applyDamage(null,u,dmg,'spell'); u.tAtk=Math.max(u.tAtk,stun||0); if(slow>0){u.slowT=Math.max(u.slowT||0,1.0); u.slowPct=slow;} makeHitFx(game.fx,u.x,u.y);} } game.shakeT=Math.max(game.shakeT,0.08); }
export function step(dt){ if(game.state!==STATE.PLAY) return; if(game.spawnGate>0){ game.spawnGate-=dt; if(game.spawnGate<=0) spawnWave(game.wave);} if(game.volleyT>0) game.volleyT=Math.max(0,game.volleyT-dt); for(const u of game.units){ if(u.hp<=0) continue; if(u.hitT>0) u.hitT=Math.max(0,u.hitT-dt); if(u.swingT>0) u.swingT=Math.max(0,u.swingT-dt); if(u.slowT>0) u.slowT=Math.max(0,u.slowT-dt); const speedMod=(u.slowT>0)?(1-(u.slowPct||0)):1; if(u.team==='ally'){ const e=nearest(u,'enemy'); if(!e) continue; const dx=e.x-u.x,dy=e.y-u.y,dist=Math.hypot(dx,dy); const rngPx=u.rng*cellH*0.9; u.tAtk-=dt; if(dist<=rngPx){ if(u.tAtk<=0){ if(u.rng>1) shoot(u,e,u.atk); else{ applyDamage(u,e,u.atk,'phys'); u.swingT=0.12; } u.tAtk=u.cd; } } else { const sp=u.spd*dt*speedMod; u.x+=sp*Math.sign(dx)*0.6; u.y+=sp*Math.sign(dy); } } else { const a=nearest(u,'ally'); const tx=a? a.x:u.x, ty=a? a.y: H*0.94; const dx=tx-u.x, dy=ty-u.y, dist=Math.hypot(dx,dy); const rngPx=u.rng*cellH*0.9; u.tAtk-=dt; if(a && dist<=rngPx){ if(u.tAtk<=0){ if(u.rng>1) shoot(u,a,u.atk); else { applyDamage(u,a,u.atk,'phys'); u.swingT=0.12; } u.tAtk=u.cd; } } else if(!a && u.y>=H*0.93){ u.y=Math.min(u.y,H*0.94); if(u.tAtk<=0){ const baseD=u.atk*0.9; game.necroHP-=baseD; makeNumFx(game.fx, W*0.5,H*0.95,'-'+Math.round(baseD),'#ff8a8a'); u.tAtk=u.cd; game.shakeT=Math.max(game.shakeT,0.05);} } else { const sp=u.spd*dt*speedMod; u.x+=sp*Math.sign(dx)*0.4; u.y+=Math.abs(sp) } } u.x=Math.max(8,Math.min(W-8,u.x)); u.y=Math.max(8,Math.min(H-8,u.y)); } for(const p of game.proj){ p.x+=p.vx*dt; p.y+=p.vy*dt; p.life-=dt; if(p.life<=0) p.dead=true; const tgt=nearestPointTarget(p); if(tgt && Math.hypot(tgt.x-p.x,tgt.y-p.y)<8){ applyDamage(null,tgt,p.dmg,'phys'); p.dead=true; game.shakeT=Math.max(game.shakeT,0.02);} } game.proj=game.proj.filter(p=>!p.dead); for(const u of game.units) if(u.hp<=0||u.y>H+24) u.dead=true; game.units=game.units.filter(u=>!u.dead); const enemiesLeft=game.units.some(u=>u.team==='enemy'); if(!enemiesLeft && game.spawnGate<=0) return 'waveClear'; if(game.necroHP<=0) return 'defeat'; return null; }
